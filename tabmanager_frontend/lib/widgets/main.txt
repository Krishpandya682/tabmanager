import 'dart:convert';
import 'package:tabmanager/widgets/button_style.dart';
import 'package:flutter/material.dart';
import 'package:tabmanager/json_deserialization/link.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_speed_dial/flutter_speed_dial.dart';
import 'package:tabmanager/widgets/popup.dart';
import 'package:url_launcher/url_launcher.dart';

void main() {
  runApp(const MaterialApp(home: const HomeView()));
}

class HomeView extends StatefulWidget {
  const HomeView({Key? key}) : super(key: key);

  @override
  _HomeViewState createState() => _HomeViewState();
}

class _HomeViewState extends State<HomeView> {
  Map<String, Widget> items = {};
  int index = 0;
  void notifyParent() {
    setState(() {
      build(context);
    });
  }

  void notifyParentFull(String category) {
    items = {};
    setState(() {
      build(context);
    });
  }

  void _launchURL(String url) async {
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not launch $url';
    }
  }

  Future<List<Link>> getLinks() async {
    String url = "http://localhost:3000/links";
    var response = await http.get(Uri.parse(url));
    if (response.statusCode == 200) {
      var linksList = (json.decode(response.body) as List)
          .map((e) => Link.fromJson(e))
          .toList(); // deserialize
      return linksList;
    } else {
      throw Exception("Failed to load");
    }
  }

  Future<void> removeLink(Link link) async {
    String url = "http://localhost:3000/links/${link.id}";
    var response = await http.delete(Uri.parse(url), body: link.toJson());
    setState(() {
      build(context);
    });
  }

  Map<String, List<Link>> separateToCategories(List<Link> links) {
    // TODO do this in db later
    Map<String, List<Link>> result = {};
    for (Link i in links) {
      if (result[i.category] != null) {
        result[i.category]!.add(i);
      } else {
        result[i.category!] = [];
        result[i.category]!.add(i);
      }
    }
    return result;
  }

  Widget futureBuildResults(
      BuildContext context, AsyncSnapshot<List<Link>> snapshot) {
    if (snapshot.hasData) {
      if (snapshot.data!.isNotEmpty) {
        if (snapshot.data != null) {
          Map<String, List<Link>> separated =
              separateToCategories(snapshot.data!);
          for (String i in separated.keys) {
            items[i] = Column(
              children: [
                Card(
                  shape: const RoundedRectangleBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(25),
                    ),
                  ),
                  clipBehavior: Clip.antiAlias,
                  child: Container(
                    decoration: const BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.bottomRight,
                        end: Alignment.topLeft,
                        colors: <Color>[
                          Color.fromARGB(255, 125, 138, 255),
                          Color.fromARGB(255, 255, 117, 117),
                        ],
                      ),
                    ),
                    child: ListTile(
                      title: Center(
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Spacer(),
                            Text(
                              "${separated[i]![index].category}",
                              style: const TextStyle(fontSize: 25),
                            ),
                            Spacer(),
                            CircleAvatar(
                              backgroundColor:
                                  Color.fromARGB(255, 114, 90, 250),
                              child: IconButton(
                                  icon: const Icon(Icons.add,
                                      color: Colors.white),
                                  onPressed: () async {
                                    await showDialog(
                                      // Flutter method for showing popups
                                      context: context,
                                      builder: (context) =>
                                          NewLinkPopupCategory(
                                              separated[i]![index].category!),
                                    );
                                    setState(() {
                                      build(context);
                                    });
                                  }),
                            )
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
                Expanded(
                  child: Container(
                    decoration: BoxDecoration(
                      border: Border.all(width: 8, color: Colors.transparent),
                    ),
                    child: ListView.builder(
                        scrollDirection: Axis.vertical,
                        shrinkWrap: true,
                        itemCount: separated[i]!.length,
                        itemBuilder: (context, index) {
                          return Card(
                            shape: const RoundedRectangleBorder(
                              borderRadius: BorderRadius.all(
                                Radius.circular(25),
                              ),
                            ),
                            clipBehavior: Clip.antiAlias,
                            child: Container(
                              decoration: const BoxDecoration(
                                gradient: LinearGradient(
                                  begin: Alignment.bottomRight,
                                  end: Alignment.topLeft,
                                  colors: <Color>[
                                    Color.fromARGB(255, 125, 138, 255),
                                    Color.fromARGB(255, 255, 117, 117),
                                  ],
                                ),
                              ),
                              child: Column(
                                children: [
                                  Expanded(
                                    child: ListTile(
                                      title: Center(
                                        child: Row(
                                          mainAxisAlignment:
                                              MainAxisAlignment.end,
                                          children: [
                                            Spacer(),
                                            Text(
                                              "${separated[i]![index].title}",
                                              overflow: TextOverflow.fade,
                                            ),
                                            Spacer(),
                                            Text(
                                              "${separated[i]![index].link}",
                                              overflow: TextOverflow.fade,
                                            ),
                                            Spacer(),
                                            ElevatedButton(
                                                onPressed: () {
                                                  _launchURL(
                                                      "${separated[i]![index].link}");
                                                },
                                                style: buttonStyle,
                                                child: const Text("Open")),
                                            SizedBox(width: 8),
                                            ElevatedButton(
                                                onPressed: () async {
                                                  await removeLink(
                                                      separated[i]![index]);
                                                  setState(() {
                                                    items = {};
                                                    build(context);
                                                  });
                                                },
                                                style: dangerButtonStyle,
                                                child: const Text("Delete")),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          );
                        }),
                  ),
                ),
              ],
            );
          }
        }
        return Column(
          children: [
            const SizedBox(height: 30),
            Expanded(
              child: Scrollbar(
                thumbVisibility: true,
                child: ListView(
                  scrollDirection: Axis.horizontal,
                  children: items.values.toList(),
                ),
              ),
            ),
          ],
        );
      } else {
        return Container();
      }
    } else if (snapshot.hasError) {
      return Text(snapshot.error.toString());
    } else {
      return const Center(child: CircularProgressIndicator.adaptive());
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          flexibleSpace: Container(
              decoration: const ShapeDecoration(
            shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.all(Radius.circular(25))),
            gradient: LinearGradient(
                begin: Alignment.bottomRight,
                end: Alignment.topLeft,
                colors: <Color>[
                  Color.fromARGB(255, 125, 138, 255),
                  Color.fromARGB(255, 255, 117, 117),
                ]),
          )),
          shape: const RoundedRectangleBorder(
              borderRadius: BorderRadius.all(Radius.circular(25))),
          backgroundColor: Colors.white,
          shadowColor: Colors.white,
          title: Row(children: const [
            SizedBox(width: 20),
            Text(
              "Tab Manager",
              style: TextStyle(color: Colors.black),
            )
          ]),
        ),
        body: FutureBuilder(
          builder: futureBuildResults,
          future: getLinks(),
        ),
        floatingActionButton: SpeedDial(
          backgroundColor: const Color.fromARGB(255, 114, 90, 250),
          overlayColor: Colors.black,
          overlayOpacity: 0.3,
          animatedIcon: AnimatedIcons.menu_close,
          children: [
            SpeedDialChild(
                child: const Icon(Icons.add),
                label: "Add new link",
                onTap: () async {
                  await showDialog(
                    // Flutter method for showing popups
                    context: context,
                    builder: (context) => NewLinkPopup(),
                  );
                  setState(() {
                    build(context);
                  });
                })
          ],
        ));
  }
}
